// Code generated by MockGen. DO NOT EDIT.
// Source: producer.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/Entreeka/sender/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockMessageProducerService is a mock of MessageProducerService interface.
type MockMessageProducerService struct {
	ctrl     *gomock.Controller
	recorder *MockMessageProducerServiceMockRecorder
}

// MockMessageProducerServiceMockRecorder is the mock recorder for MockMessageProducerService.
type MockMessageProducerServiceMockRecorder struct {
	mock *MockMessageProducerService
}

// NewMockMessageProducerService creates a new mock instance.
func NewMockMessageProducerService(ctrl *gomock.Controller) *MockMessageProducerService {
	mock := &MockMessageProducerService{ctrl: ctrl}
	mock.recorder = &MockMessageProducerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageProducerService) EXPECT() *MockMessageProducerServiceMockRecorder {
	return m.recorder
}

// CreateHandler mocks base method.
func (m *MockMessageProducerService) CreateHandler(ctx context.Context, message *entity.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHandler", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateHandler indicates an expected call of CreateHandler.
func (mr *MockMessageProducerServiceMockRecorder) CreateHandler(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHandler", reflect.TypeOf((*MockMessageProducerService)(nil).CreateHandler), ctx, message)
}
